// Easy Link (ELK)
    
   // Um link fácil para investir em criptomoedas

   //Smart contracts are ready and will revolutionize many industries, replacing the need for traditional legal agreements and automated digital agreements with the need to centralize the task. Investing is easier every day, with the various applications and content that come in the palm of your hand. Unfortunately, due to the large amount of information, it makes it difficult and delays investors' decision-making, this delay can impact the construction of the wealth of those who dream of conquering it one day in the future. These difficulties would be no different for those who are entering the universe of the cryptocurrency market, with different types of technology, functions, market, economy and other points that contribute to making our choices about which cryptocurrencies we should be investing more difficult. In the major economies of the world have already launched ETF (index fund) focused on cryptocurrencies, the problem of this type of investment starts with the minimum capital and the little diversification of assets that make up the portfolio that allocate most of Bitcoin and Ethereum, leaving the smallest part for other projects that could have greater profitability and value your invested capital more.
//Easy Link é um token criado no nordeste brasileiro, e o primeiro token com função cesta de ativos com lastro em criptomoedas que cumpram requisitos como: Solução de problemas, Economia, Adoção de mercado , Projeto, Análise gráfica, fundamentalista e dados on-chain.

//Através desses requisitos podemos filtrar as melhores oportunidades para montar uma estrutura, na qual o detentor do token possa ter acesso ao mercado cripto de forma prática. Sua razão de existência se dá pela dificuldade em saber qual ou quais criptomoedas investir, quais taxas serão cobradas, qual melhor corretora e como analisar os diversos tipos de dados que as criptomoedas e seus projetos dispõe.

//O projeto Easy Link conta com um contrato inteligente escrito e gravado na blockchain da BSC, uma vez escrito não será possível corromper ou fraudar seu código fonte, tornando-o incorruptível e seguro para investir, além de sua segurança o projeto conta com alguns recursos que iremos falar mais adiante neste documento. 

//Além de um contrato inteligente, o projeto conta com uma gestão ativa que realiza operações diárias com foco na valorização do token e do patrimônio alocado. Diferente de fundos de investimentos e ETF/Fundos de índices, o Easy Link não foca apenas em Bitcoin e Ethereum como é feito na maioria das opções disponíveis em corretoras centralizadas, o foco do Easy Link é buscar projetos promissores que rentabilizem de forma exponencial aquilo que foi investido.


   // Atributos da moeda:
  // - 100.000.000,00 tokens totais;
 //  - 3% dos tokens foram destinados aos developers desse contrato – com o objetivo de utilizá-los para fins de investir na tecnologia e upgrade do projeto, tais quais marketing, desenvolvimento de ferramentas para aumentar os recursos disponíveis do Easy Link;
 //  - 3% das taxas de liquidez serão automaticamente enviadas a um endereço criado por esse contrato, o qual as venderá
  // automaticamente e adicionará, proporcionalmente, Easy Link é o caminho mais simples para iniciar seus investimentos no mercado de criptomoedas

    //Para criar a liquidez inicial, vamos parear 1 BNB com as tokens restantes do total gerado (94%).
 
  // Estaremos trabalhando de forma ativa a fim de valorizar o projeto e o token Easy Link.

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

contract Token {
    
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    
    uint public totalSupply = 1000000000 * 10 ** 10;
    string public name = "EasyLink";
    string public symbol = "ELK";
    uint public decimals = 10;
    
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    
    constructor() {
        balances[msg.sender] = totalSupply;
    }
    
    function balanceOf(address owner) public view returns(uint) {
        return balances[owner];
    }
    
    function transfer(address to, uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'Saldo insuficiente (balance too low)');
        balances[to] += value;
        balances[msg.sender] -= value;
        emit Transfer(msg.sender, to, value);
        return true;
    }
    
    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(balanceOf(from) >= value, 'Saldo insuficiente (balance too low)');
        require(allowance[from][msg.sender] >= value, 'Sem permissao (allowance too low)');
        balances[to] += value;
        balances[from] -= value;
        emit Transfer(from, to, value);
        return true;
    }
    
    function approve(address spender, uint value) public returns(bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    
}
